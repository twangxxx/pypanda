}
# *** RUN CONDOR ***
nTF <- length(unique(newdf$tf))
nGene <- length(unique(newdf$gene))
if(nTF < nGene) {
condor.object <- create.condor.object(newdf[,c(2,1)])
xlab <- "Gene"
ylab <- "TF"
} else { condor.object <- create.condor.object(newdf[,c(1,2)])
xlab <- "TF"
ylab <- "Gene"
}
condor.object <- condor.cluster(condor.object, project=F)
colnames(condor.object$edges)[c(1,2)] <- c ("red","blue")
color_num <- max(condor.object$red.memb$com)
color <- viridis(color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = "D")
condor.plot.communities(condor.object,
color_list=color,point.size=0.1,
xlab=xlab,ylab=ylab)
}
ddd <- runCondor(aa$panda)
runCondor <- function(df,cutoff = m){
# *** SELECT EDGE ***
# if the threshold (cutoff) of edge-weight is undefined.
if (missing(cutoff)){
cutoff <- calculateCutoff(df)
message("Using the midway of [median weight of non-prior edges] and [median weight of prior edges],
all weights mentioned above are transformationed with formula w'=ln(e^w+1)")
# transform the edge weight with formula w'=ln(e^w+1) to generate a new column of original data frame
newdf <- cbind(df,log(exp(df[,4])+1))
# rename the data frame and use cutoff to select edge-weights.
colnames(newdf) <- c("tf", "gene","motif", "force", "modifiedForce")
newdf <- newdf[newdf$modifiedForce >= cutoff,c(-3,-5)]
}
# if the threshold (cutoff) of edge-weight is defined.
# when the customed threshold is out of range, print out error message.
if (cutoff > max(df[,4]) || cutoff < min(df[,4]) ) {
stop(paste("Please provide the edge-weight cutoff between ", min(df[,4])," and ", max(df[,4])))
}
else {
newdf <- df[df$force >= cutoff,-3]
}
# *** RUN CONDOR ***
nTF <- length(unique(newdf$tf))
nGene <- length(unique(newdf$gene))
if(nTF < nGene) {
condor.object <- create.condor.object(newdf[,c(2,1)])
xlab <- "Gene"
ylab <- "TF"
} else { condor.object <- create.condor.object(newdf[,c(1,2)])
xlab <- "TF"
ylab <- "Gene"
}
condor.object <- condor.cluster(condor.object, project=F)
colnames(condor.object$edges)[c(1,2)] <- c ("red","blue")
color_num <- max(condor.object$red.memb$com)
color <- viridis(color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = "D")
condor.plot.communities(condor.object,
color_list=color,point.size=0.06,
xlab=xlab,ylab=ylab)
}
ddd <- runCondor(aa$panda)
runCondor <- function(df,cutoff = m){
# *** SELECT EDGE ***
# if the threshold (cutoff) of edge-weight is undefined.
if (missing(cutoff)){
cutoff <- calculateCutoff(df)
message("Using the midway of [median weight of non-prior edges] and [median weight of prior edges],
all weights mentioned above are transformationed with formula w'=ln(e^w+1)")
# transform the edge weight with formula w'=ln(e^w+1) to generate a new column of original data frame
newdf <- cbind(df,log(exp(df[,4])+1))
# rename the data frame and use cutoff to select edge-weights.
colnames(newdf) <- c("tf", "gene","motif", "force", "modifiedForce")
newdf <- newdf[newdf$modifiedForce >= cutoff,c(-3,-5)]
}
# if the threshold (cutoff) of edge-weight is defined.
# when the customed threshold is out of range, print out error message.
if (cutoff > max(df[,4]) || cutoff < min(df[,4]) ) {
stop(paste("Please provide the edge-weight cutoff between ", min(df[,4])," and ", max(df[,4])))
}
else {
newdf <- df[df$force >= cutoff,-3]
}
# *** RUN CONDOR ***
nTF <- length(unique(newdf$tf))
nGene <- length(unique(newdf$gene))
if(nTF < nGene) {
condor.object <- create.condor.object(newdf[,c(2,1)])
xlab <- "Gene"
ylab <- "TF"
} else { condor.object <- create.condor.object(newdf[,c(1,2)])
xlab <- "TF"
ylab <- "Gene"
}
condor.object <- condor.cluster(condor.object, project=F)
colnames(condor.object$edges)[c(1,2)] <- c ("red","blue")
color_num <- max(condor.object$red.memb$com)
color <- viridis(color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = "D")
condor.plot.communities(condor.object,
color_list=color,point.size=0.05,
xlab=xlab,ylab=ylab)
}
ddd <- runCondor(aa$panda)
runCondor <- function(df,cutoff = m, pt = pt){
# *** SELECT EDGE ***
# if the threshold (cutoff) of edge-weight is undefined.
if (missing(cutoff)){
cutoff <- calculateCutoff(df)
message("Using the midway of [median weight of non-prior edges] and [median weight of prior edges],
all weights mentioned above are transformationed with formula w'=ln(e^w+1)")
# transform the edge weight with formula w'=ln(e^w+1) to generate a new column of original data frame
newdf <- cbind(df,log(exp(df[,4])+1))
# rename the data frame and use cutoff to select edge-weights.
colnames(newdf) <- c("tf", "gene","motif", "force", "modifiedForce")
newdf <- newdf[newdf$modifiedForce >= cutoff,c(-3,-5)]
}
# if the threshold (cutoff) of edge-weight is defined.
# when the customed threshold is out of range, print out error message.
if (cutoff > max(df[,4]) || cutoff < min(df[,4]) ) {
stop(paste("Please provide the edge-weight cutoff between ", min(df[,4])," and ", max(df[,4])))
}
else {
newdf <- df[df$force >= cutoff,-3]
}
# *** RUN CONDOR ***
nTF <- length(unique(newdf$tf))
nGene <- length(unique(newdf$gene))
if(nTF < nGene) {
condor.object <- create.condor.object(newdf[,c(2,1)])
xlab <- "Gene"
ylab <- "TF"
} else { condor.object <- create.condor.object(newdf[,c(1,2)])
xlab <- "TF"
ylab <- "Gene"
}
condor.object <- condor.cluster(condor.object, project=F)
colnames(condor.object$edges)[c(1,2)] <- c ("red","blue")
color_num <- max(condor.object$red.memb$com)
color <- viridis(color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = "D")
condor.plot.communities(condor.object,
color_list=color,point.size=0.06,
xlab=xlab,ylab=ylab)
}
runCondor <- function(df,cutoff = m, pt = pt){
# *** SELECT EDGE ***
# if the threshold (cutoff) of edge-weight is undefined.
if (missing(cutoff)){
cutoff <- calculateCutoff(df)
message("Using the midway of [median weight of non-prior edges] and [median weight of prior edges],
all weights mentioned above are transformationed with formula w'=ln(e^w+1)")
# transform the edge weight with formula w'=ln(e^w+1) to generate a new column of original data frame
newdf <- cbind(df,log(exp(df[,4])+1))
# rename the data frame and use cutoff to select edge-weights.
colnames(newdf) <- c("tf", "gene","motif", "force", "modifiedForce")
newdf <- newdf[newdf$modifiedForce >= cutoff,c(-3,-5)]
}
# if the threshold (cutoff) of edge-weight is defined.
# when the customed threshold is out of range, print out error message.
if (cutoff > max(df[,4]) || cutoff < min(df[,4]) ) {
stop(paste("Please provide the edge-weight cutoff between ", min(df[,4])," and ", max(df[,4])))
}
else {
newdf <- df[df$force >= cutoff,-3]
}
# *** RUN CONDOR ***
nTF <- length(unique(newdf$tf))
nGene <- length(unique(newdf$gene))
if(nTF < nGene) {
condor.object <- create.condor.object(newdf[,c(2,1)])
xlab <- "Gene"
ylab <- "TF"
} else { condor.object <- create.condor.object(newdf[,c(1,2)])
xlab <- "TF"
ylab <- "Gene"
}
condor.object <- condor.cluster(condor.object, project=F)
colnames(condor.object$edges)[c(1,2)] <- c ("red","blue")
color_num <- max(condor.object$red.memb$com)
color <- viridis(color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = "D")
condor.plot.communities(condor.object,
color_list=color,point.size=0.06,
xlab=xlab,ylab=ylab)
}
ddd <- runCondor(aa$panda)
runCondor <- function(df,cutoff = m, pt = pt){
# *** SELECT EDGE ***
# if the threshold (cutoff) of edge-weight is undefined.
if (missing(cutoff)){
cutoff <- calculateCutoff(df)
message("Using the midway of [median weight of non-prior edges] and [median weight of prior edges],
all weights mentioned above are transformationed with formula w'=ln(e^w+1)")
# transform the edge weight with formula w'=ln(e^w+1) to generate a new column of original data frame
newdf <- cbind(df,log(exp(df[,4])+1))
# rename the data frame and use cutoff to select edge-weights.
colnames(newdf) <- c("tf", "gene","motif", "force", "modifiedForce")
newdf <- newdf[newdf$modifiedForce >= cutoff,c(-3,-5)]
}
# if the threshold (cutoff) of edge-weight is defined.
# when the customed threshold is out of range, print out error message.
if (cutoff > max(df[,4]) || cutoff < min(df[,4]) ) {
stop(paste("Please provide the edge-weight cutoff between ", min(df[,4])," and ", max(df[,4])))
}
else {
newdf <- df[df$force >= cutoff,-3]
}
# *** RUN CONDOR ***
nTF <- length(unique(newdf$tf))
nGene <- length(unique(newdf$gene))
if(nTF < nGene) {
condor.object <- create.condor.object(newdf[,c(2,1)])
xlab <- "Gene"
ylab <- "TF"
} else { condor.object <- create.condor.object(newdf[,c(1,2)])
xlab <- "TF"
ylab <- "Gene"
}
condor.object <- condor.cluster(condor.object, project=F)
colnames(condor.object$edges)[c(1,2)] <- c ("red","blue")
#color_num <- max(condor.object$red.memb$com)
#color <- viridis(color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = "D")
#condor.plot.communities(condor.object,
#                       color_list=color,point.size=0.06,
#                       xlab=xlab,ylab=ylab)
return(condor.object)
}
ddd <- runCondor(aa$panda)
max(ddd$red.memb$com)
runCondor <- function(df,cutoff = m){
# *** SELECT EDGE ***
# if the threshold (cutoff) of edge-weight is undefined.
if (missing(cutoff)){
cutoff <- calculateCutoff(df)
message("Using the midway of [median weight of non-prior edges] and [median weight of prior edges],
all weights mentioned above are transformationed with formula w'=ln(e^w+1)")
# transform the edge weight with formula w'=ln(e^w+1) to generate a new column of original data frame
newdf <- cbind(df,log(exp(df[,4])+1))
# rename the data frame and use cutoff to select edge-weights.
colnames(newdf) <- c("tf", "gene","motif", "force", "modifiedForce")
newdf <- newdf[newdf$modifiedForce >= cutoff,c(-3,-5)]
}
# if the threshold (cutoff) of edge-weight is defined.
# when the customed threshold is out of range, print out error message.
if (cutoff > max(df[,4]) || cutoff < min(df[,4]) ) {
stop(paste("Please provide the edge-weight cutoff between ", min(df[,4])," and ", max(df[,4])))
}
else {
newdf <- df[df$force >= cutoff,-3]
}
# *** RUN CONDOR ***
nTF <- length(unique(newdf$tf))
nGene <- length(unique(newdf$gene))
if(nTF < nGene) {
condor.object <- create.condor.object(newdf[,c(2,1)])
} else { condor.object <- create.condor.object(newdf[,c(1,2)])}
condor.object <- condor.cluster(condor.object, project=F)
colnames(condor.object$edges)[c(1,2)] <- c ("red","blue")
return(condor.object)
}
ddd <- runCondor(aa$panda)
library("devtools")
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
py_run_string(paste("a=p.export_panda_results"))
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
panda <- py$a
colnames(panda) <- c()
output <- list("panda" = panda, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
library(reticulate)
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
py_run_string(paste("a=p.export_panda_results"))
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
output <- list("panda" = py$a, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
library(reticulate)
aa <- runPanda(e="~/Desktop/Yeast_Expression.txt", m="~/Desktop/Yeast_Motif.pairs", f = F)$panda
bb <- runPanda(e="~/Desktop/Yeast_Expression.txt")$panda
View(bb)
test <- runPanda(e="~/Desktop/expr4.txt", m="~/Desktop/chip.txt", ppi = "~/Desktop/ppi.txt",f = T)$panda
View(test)
load("/Users/wangtian/Documents/GitHub/panda-condor-pkg/PKG/PandaCondor/Data/panda_inputs.rdata")
View(expr10)
write.table(ppi,"~/Desktop/ppi.txt",sep="\t",row.names=F,col.names = F)
write.table(expr4,"~/Desktop/expr4.txt",sep="\t",row.names=T,col.names = F)
write.table(expr10,"~/Desktop/expr10.txt",sep="\t",row.names=T,col.names = F)
write.table(ppi,"~/Desktop/ppi.txt",sep="\t",row.names=F,col.names = F)
write.table(chip,"~/Desktop/chip.txt",sep="\t",row.names=F,col.names = F)
library(pandaR)
?panda
load("/Users/wangtian/Documents/Internship_DFCI/TB_JP/rdata/net.rdata")
View(net)
View(net)
net4 <- panda(chip, expr4, ppi, output="regulatory",
edgelist=TRUE, remove.missing.ppi=TRUE,
remove.missing.motif=TRUE, progress=TRUE,
zScale=zScale)
View(chip)
View(expr4)
net <- RunPANDA(chip, expr4, expr10, ppi)
RunPANDA <- function(motif, expr4, expr10, ppi, zScale=TRUE){
net4 <- panda(motif, expr4, ppi, output="regulatory",
edgelist=TRUE, remove.missing.ppi=TRUE,
remove.missing.motif=TRUE, progress=TRUE,
zScale=zScale)
net10 <- panda(motif, expr10, ppi, output="regulatory",
edgelist=TRUE, remove.missing.ppi=TRUE,
remove.missing.motif=TRUE, progress=TRUE,
zScale=zScale)
net4 <- net4@regNet
net10 <- net10@regNet
net <- merge(net4, net10, by=c("TF","Gene","Motif"))
colnames(net)[4:5] <- c("Z.T4", "Z.T10")
net <- data.table(net)
setnames(net, "Gene", "RV")
net$TF <- as.character(net$TF)
net$RV <- as.character(net$RV)
return(net)
}
net <- RunPANDA(chip, expr4, expr10, ppi)
load("/Users/wangtian/Documents/Internship_DFCI/TB_JP/data/panda/random_networks/panda_inputs.rdata")
net4 <- panda(motif, expr4, ppi, output="regulatory",
edgelist=TRUE, remove.missing.ppi=TRUE,
remove.missing.motif=TRUE, progress=TRUE,
zScale=zScale)
net4 <- panda(chip, expr4, ppi, output="regulatory",
edgelist=TRUE, remove.missing.ppi=TRUE,
remove.missing.motif=TRUE, progress=TRUE,
zScale=zScale)
net <- RunPANDA(chip, expr4, expr10, ppi)
net4 <- panda(chip, expr4, ppi, output="regulatory",
edgelist=TRUE, remove.missing.ppi=TRUE,
remove.missing.motif=TRUE, progress=TRUE,
zScale=T)
net4@regNet
pandaT4 <- net4@regNet
View(pandaT4)
load("/Users/wangtian/Documents/Internship_DFCI/TB_JP/rdata/net.rdata")
View(net)
runPanda <- function( e = expression, m = motif, ppi = ppi, f = remove_missing){
if(missing(e)){
stop("Please provide the gene expression value with option e, e.g. e=\"expression.txt\"") }
else{ str1 <- paste("\'",e, "\'", sep = '') }
if(missing(m)){
str2 <-  paste('None')
message("Pair file of motif edges is not provided, analysis continues with Pearson correlation matrix.") }
else{ str2 <- paste("\'",m,"\'", sep = '') }
if(missing(ppi)){
str3 <- paste('None')
message("No PPI provided.") }
else{ str3 <- paste("\'",ppi, "\'", sep = '') }
if(missing(f) || f == FALSE ){
str4 <- paste('False')
message("Miss the value of options f, using the default value 0, i.e. Not removing missing values ") }
else { str4 <- paste('True') }
# source the pypanda from github raw website.
reticulate::source_python("https://raw.githubusercontent.com/twangxxx/pypanda/master/pypanda/panda.py",convert = TRUE)
# invoke py code to create a pypanda object
#str <- paste("p=Panda(", "\'", e, "\'", ",", "\'", m, "\'", ",", "\'", ppi, "\'", ",", f, ")", sep = '')
str <-  paste("p=Panda(", str1, ",", str2,",", str3, ",", str4, ")", sep ='')
print(str)
# call py
py_run_string(str)
py_run_string(paste("a=p.export_panda_results"))
# in-degree of panda network
py_run_string(paste("indegree=p.return_panda_indegree()"))
# out-degree of panda netwook
py_run_string(paste("outdegree=p.return_panda_outdegree()"))
# return a list with three items-- panda all output data frame, indegree (gene nodes) data frame,
# and outdegree (tf nodes) data frame.
# use $panda, $indegree and $outdegree to access each item.
output <- list("panda" = py$a, "indegree" = py$indegree, "outdegree" = py$outdegree)
print ("Finish PANDA run...")
return(output)
}
test <- runPanda(e="~/Desktop/expr4.txt", m="~/Desktop/chip.txt", ppi = "~/Desktop/ppi.txt",f = T)$panda
View(test)
View(test)
write.table(test,"~/Desktop/codetest.txt",sep="\t",row.names=F, col.names = F)
net4 <- panda(chip, expr4, ppi, output="regulatory",
edgelist=TRUE, remove.missing.ppi=TRUE,
remove.missing.motif=TRUE, progress=TRUE,
zScale=T)
pandaT4 <- net4@regNet
View(test)
test <- runPanda(e="~/Desktop/expr4.txt", m="~/Desktop/chip.txt", ppi = "~/Desktop/ppi.txt",f = TRUE)$panda
pandaRT4 <- net4@regNet
pypandaT4 <- runPanda(e="~/Desktop/expr4.txt", m="~/Desktop/chip.txt", ppi = "~/Desktop/ppi.txt",f = TRUE)$panda
write.table(expr4,"~/Desktop/expr4.txt",sep="\t",row.names=T,col.names = F)
write.table(expr10,"~/Desktop/expr10.txt",sep="\t",row.names=T,col.names = F)
write.table(ppi,"~/Desktop/ppi.txt",sep="\t",row.names=F,col.names = F)
write.table(chip,"~/Desktop/chip.txt",sep="\t",row.names=F,col.names = F)
pypandaT4 <- runPanda(e="~/Desktop/expr4.txt", m="~/Desktop/chip.txt", ppi = "~/Desktop/ppi.txt",f = TRUE)$panda
bb <- runPanda(e="~/Desktop/Yeast_Expression.txt")$panda
delete(pandaT4)
rm(pandaT4)
rm(test)
View(pandaRT4)
View(pypandaT4)
citation("pandaR")
library("devtools")
library(roxygen2)
search()
search()
library(devtools)
devtools::install_github("twangxxx/PandaCondor")
search()
library(roxygen2)
setwd("/Users/wangtian/Documents/GitHub/panda-condor-pkg/PKG/")
setwd("./PandaCondor/")
document()
setwd("..")
install("PandaCondor")
library("devtools")
library(roxygen2)
setwd("/Users/wangtian/Documents/GitHub/panda-condor-pkg/PKG/")
setwd("./PandaCondor/")
document()
setwd("..")
install("PandaCondor")
?runPanda
?runCondor
?runCondor
# refer to four input datasets files in inst/extdat
treated_expression_file_path <- system.file("extdata", "expr4.txt", package = "PandaCondor", mustWork = TRUE)
control_expression_file_path <- system.file("extdata", "expr10.txt", package = "PandaCondor", mustWork = TRUE)
motif_file_path <- system.file("extdata", "chip.txt", package = "PandaCondor", mustWork = TRUE)
ppi_file_path <- system.file("extdata", "ppi.txt", package = "PandaCondor", mustWork = TRUE)
# Run PANDA for treated and control network
treated_all_panda_result <- runPanda(e = treated_expression_file_path, m = motif_file_path, ppi = ppi_file_path, f = TRUE )
control_all_panda_result <- runPanda(e = control_expression_file_path, m = motif_file_path, ppi = ppi_file_path, f = TRUE )
# access PANDA regulatory network
treated_net <- treated_all_panda_result$panda
control_net <- control_all_panda_result$panda
# Run CONDOR
treated_condor_object <- runCondor(treated_net, threshold = 0)
control_condor_object <- runCondor(control_net, threshold = 0)
# plot communities
# package igraph and package viridisLite are already loaded with this package.
treated_color_num <- max(treated_condor_object$red.memb$com)
treated_color <- viridis(treated_color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = "D")
condor.plot.communities(treated_condor_object, color_list=treated_color, point.size=0.04, xlab="Target", ylab="Regulator")
control_color_num <- max(control_condor_object$red.memb$com)
control_color <- viridis(control_color_num, alpha = 1, begin = 0, end = 1, direction = 1, option = "D")
condor.plot.communities(control_condor_object, color_list=control_color , point.size=0.04, xlab="Target", ylab="Regulator")
search()
setwd("/Users/wangtian/Documents/GitHub/pypanda")
document()
setwd("/Users/wangtian/Documents/GitHub/pypanda")
setwd("Users/wangtian/Documents/GitHub/PandaCondor")
setwd("Users/wangtian/Documents/GitHub/PandaCondor")
